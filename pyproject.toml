[tool.flake8]
max-line-length = 120
max-complexity = 11

[tool.black]
line-length = 120
target_version = ['py310']
include = '\.pyi?$'
exclude = '''

(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
'''


[tool.pylint."FORMAT"]
max-line-length=120

[tool.pylint."MASTER"]
init-hook='import sys;import os;from pylint.config import find_default_config_files;[sys.path.append(p) for p in os.getenv("PYTHONPATH").split(";")];[sys.path.append(os.path.join(os.path.dirname(p), "python") for p in find_default_config_files()];sys.path.append(os.path.join(os.path.dirname(p), "vendor_python") for p in find_default_config_files()'

[tool.pylint."MESSAGES CONTROL"]
disable=[
  "consider-using-f-string",
  "invalid-name",
  "missing-function-docstring",
  "import-outside-toplevel",
  "consider-using-from-import",
  "wrong-import-order",
]


[tool.pyright]
extraPaths = [
  "python",
  "vendor_python",
  "lib",
  "src",
]
exclude = [
  "**/node_modules",
  "**/__pycache__",
]
reportUnusedImport = false
reportMissingImports = true
reportMissingTypeStubs = false
reportMissingModuleSource = false
reportTypeCommentUsage = false
pythonVersion = "3.7"
pythonPlatform = "Windows"
typeCheckingMode = "basic"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 120
indent-width = 4

target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"
